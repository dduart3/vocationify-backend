import { GoogleGenAI } from "@google/genai";
import { AIServiceInterface, ConversationRequest, ConversationResponse, ConversationMessage } from "./AIServiceInterface";

export class GeminiAIService extends AIServiceInterface {
  private ai: GoogleGenAI;

  constructor(apiKey: string) {
    super();
    this.ai = new GoogleGenAI({ apiKey });
  }

  async generateConversationalResponse(request: ConversationRequest): Promise<ConversationResponse> {
    const systemPrompt = this.buildSystemPrompt(request.context);
    const conversationHistory = this.formatMessagesForGemini(request.messages);
    
    const prompt = `${systemPrompt}

HISTORIAL DE CONVERSACI√ìN:
${conversationHistory}

INSTRUCCIONES ESPEC√çFICAS:
- Responde como ARIA, un asistente de orientaci√≥n vocacional amigable y conversacional
- OBJETIVO PRINCIPAL: Descubrir perfil vocacional COMPLETO para recomendar TOP 3 carreras con alta confianza
- ESTRATEGIA: UNA pregunta clara y espec√≠fica por vez - no m√∫ltiples preguntas
- PROGRESI√ìN: Saludo ‚Üí Intereses ‚Üí Habilidades ‚Üí Valores ‚Üí Ambiente ‚Üí Motivaciones ‚Üí Recomendaciones  
- USA CONTEXTO: Conecta respuestas anteriores para hacer LA siguiente pregunta m√°s inteligente
- S√â ESPEC√çFICA: Situaciones concretas, pero UNA pregunta a la vez
- ENFOQUE SIMPLE: Cada pregunta explora UN aspecto principal, mant√©nlo conversacional
- META: 8-12 intercambios eficientes, una pregunta por mensaje

FASES DETALLADAS:
1. EXPLORACI√ìN (3-4 preguntas): UNA pregunta sobre intereses, luego actividades favoritas, materias
2. ASSESSMENT (4-5 preguntas): UNA pregunta sobre habilidades, luego valores, ambiente de trabajo
3. RECOMENDACI√ìN: Analiza CUIDADOSAMENTE los intereses del usuario contra la base de datos de carreras
   - Lee las descripciones de carreras para encontrar las m√°s relevantes
   - Considera tanto RIASEC como la compatibilidad tem√°tica
   - Justifica cada recomendaci√≥n con conexiones espec√≠ficas a sus intereses
4. EXPLORACI√ìN DE CARRERAS: Responder preguntas espec√≠ficas del usuario
5. FINALIZACI√ìN: Cuando usuario confirme

IMPORTANTE: NUNCA hagas m√∫ltiples preguntas en un solo mensaje

FORMATO DE RESPUESTA (JSON):
{
  "message": "Tu respuesta conversacional aqu√≠",
  "intent": "question|clarification|assessment|recommendation|completion_check|farewell",
  "suggestedFollowUp": ["pregunta opcional 1", "pregunta opcional 2"],
  "riasecAssessment": {
    "scores": {"R": 0-100, "I": 0-100, "A": 0-100, "S": 0-100, "E": 0-100, "C": 0-100},
    "confidence": 0-100,
    "reasoning": "Por qu√© estos scores"
  },
  "careerSuggestions": [
    {
      "careerId": "USAR ID EXACTO de las CARRERAS DISPONIBLES listadas arriba",
      "name": "Nombre EXACTO de carrera de la lista",
      "confidence": 0-100,
      "reasoning": "Explica espec√≠ficamente por qu√© esta carrera encaja con los intereses, habilidades y valores mencionados por el usuario. Cita palabras/temas espec√≠ficos de su conversaci√≥n."
    }
  ],
  "nextPhase": "exploration|assessment|recommendation|career_exploration|complete"
}

Responde SOLO con JSON v√°lido.`;

    try {
      const response = await this.ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: prompt
      });

      const content = response.text || '';
      console.log('ü§ñ Raw AI response:', content);
      
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.log('‚ùå No JSON found in response, using fallback');
        return this.getFallbackResponse();
      }
      
      let jsonText = jsonMatch[0];
      console.log('üìÑ Extracted JSON:', jsonText);
      
      // Try to fix common JSON issues
      if (!jsonText.trim().endsWith('}')) {
        console.log('‚ö†Ô∏è JSON appears truncated, attempting to fix...');
        // Find the last complete field and close the JSON
        const lastCompleteField = jsonText.lastIndexOf(',');
        if (lastCompleteField > 0) {
          jsonText = jsonText.substring(0, lastCompleteField) + '}';
          console.log('üîß Fixed JSON:', jsonText);
        }
      }
      
      let parsedResponse: ConversationResponse;
      try {
        parsedResponse = JSON.parse(jsonText) as ConversationResponse;
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError);
        console.log('üîß Attempting to use fallback...');
        return this.getFallbackResponse();
      }
      console.log('‚úÖ Parsed response:', { 
        message: parsedResponse.message?.substring(0, 50) + '...', 
        intent: parsedResponse.intent,
        nextPhase: parsedResponse.nextPhase 
      });
      
      // Ensure nextPhase is set
      if (!parsedResponse.nextPhase) {
        console.log('‚ö†Ô∏è Missing nextPhase, setting to exploration');
        parsedResponse.nextPhase = 'exploration';
      }
      
      return parsedResponse;
    } catch (error) {
      console.error('‚ùå Gemini AI Service Error:', error);
      console.error('üìã Error details:', {
        model: 'gemini-2.0-flash-001',
        messageCount: request.messages.length,
        currentPhase: request.context?.currentPhase,
        errorType: error instanceof Error ? error.name : typeof error,
        errorMessage: error instanceof Error ? error.message : String(error)
      });
      console.log('üîÑ Returning fallback response due to Gemini API failure');
      return this.getFallbackResponse();
    }
  }

  async assessRiasecFromConversation(messages: ConversationMessage[]): Promise<Record<string, number>> {
    const conversationText = messages
      .filter(msg => msg.role === 'user')
      .map(msg => msg.content)
      .join('\n');

    const prompt = `Analiza esta conversaci√≥n y proporciona scores RIASEC (0-100):

CONVERSACI√ìN:
${conversationText}

CRITERIOS RIASEC:
- Realistic (R): Trabajo con herramientas, manos, actividades f√≠sicas
- Investigative (I): Investigaci√≥n, an√°lisis, resoluci√≥n de problemas
- Artistic (A): Creatividad, expresi√≥n art√≠stica, originalidad
- Social (S): Ayudar, ense√±ar, trabajar con personas
- Enterprising (E): Liderazgo, ventas, persuasi√≥n
- Conventional (C): Organizaci√≥n, datos, estructuras

Responde SOLO con JSON: {"R": score, "I": score, "A": score, "S": score, "E": score, "C": score}`;

    try {
      const response = await this.ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: prompt
      });

      const content = response.text || '';
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      return JSON.parse(jsonMatch ? jsonMatch[0] : content);
    } catch (error) {
      console.error('‚ùå Gemini RIASEC Assessment Error:', error);
      console.error('üìã Assessment context:', {
        conversationLength: conversationText.length,
        messageCount: messages.length,
        errorType: error instanceof Error ? error.name : typeof error
      });
      console.log('üîÑ Using default RIASEC scores due to assessment failure');
      return { R: 50, I: 50, A: 50, S: 50, E: 50, C: 50 };
    }
  }

  async generateContextualQuestion(context: ConversationRequest['context']): Promise<string> {
    const phase = context?.currentPhase || 'exploration';
    const previousResponses = context?.userProfile?.previousResponses || [];
    
    const prompt = `Genera una pregunta conversacional para orientaci√≥n vocacional.

CONTEXTO:
- Fase actual: ${phase}
- Respuestas previas: ${previousResponses.length}
- Intereses conocidos: ${context?.userProfile?.interests?.join(', ') || 'ninguno'}

TIPOS DE PREGUNTAS POR FASE:
- exploration: preguntas abiertas sobre intereses, actividades favoritas
- assessment: preguntas espec√≠ficas para evaluar tipos RIASEC
- recommendation: preguntas para refinar recomendaciones de carrera

Genera UNA pregunta natural y conversacional en espa√±ol. Responde solo con la pregunta.`;

    try {
      const response = await this.ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: prompt
      });

      return response.text?.trim() || "¬øQu√© tipo de actividades disfrutas m√°s?";
    } catch (error) {
      console.error('Question Generation Error:', error);
      return "¬øQu√© tipo de actividades disfrutas m√°s en tu tiempo libre?";
    }
  }

  private buildSystemPrompt(context: ConversationRequest['context']): string {
    const phase = context?.currentPhase || 'greeting';
    const userName = context?.userProfile?.name || '';
    
    let systemPrompt = `Eres ARIA, un asistente de orientaci√≥n vocacional inteligente y amigable.

PERSONALIDAD:
- C√°lido, emp√°tico y profesional
- Conversacional, no rob√≥tico
- Genuinamente interesado en ayudar
- Adaptas tu comunicaci√≥n al usuario`;

    if (phase === 'career_exploration') {
      systemPrompt += `

CONTEXTO ACTUAL - EXPLORACI√ìN DE CARRERAS:
- El usuario ya complet√≥ su evaluaci√≥n RIASEC y recibi√≥ recomendaciones iniciales
- Ahora est√° explorando carreras de forma interactiva
- Puedes responder preguntas espec√≠ficas sobre carreras, salarios, trabajo diario, requisitos
- Sugiere alternativas relevantes basadas en su perfil
- Ay√∫dalo a entender las implicaciones pr√°cticas de cada opci√≥n
- IMPORTANTE: USA SOLO las carreras de la lista abajo con sus IDs exactos para recomendaciones
- Si el usuario pregunta por una carrera NO disponible en Maracaibo:
  * S√© HONESTO: "Esa carrera no est√° disponible en Maracaibo actualmente"
  * Proporciona informaci√≥n general b√°sica sobre esa carrera si la conoces
  * Busca similares en la lista con alta similitud (>80% compatible)
  * Si no hay similares suficientes, explica las diferencias y deja que elija
  * NUNCA fuerces una recomendaci√≥n que no sea realmente similar

CARRERAS DISPONIBLES EN MARACAIBO:
${context?.availableCareers?.map(c => `- ID: ${c.id} | ${c.name}: ${c.description?.substring(0, 180)} (RIASEC: ${c.riasecCode})`).join('\n') || 'Cargando carreras...'}

OBJETIVO EN ESTA FASE:
- Resolver dudas espec√≠ficas sobre carreras
- Proporcionar informaci√≥n detallada y pr√°ctica
- Sugerir alternativas cuando sea relevante
- Ayudar a tomar una decisi√≥n informada

L√ìGICA DE FINALIZACI√ìN INTELIGENTE:
- Si detectas se√±ales de que el usuario podr√≠a estar listo para finalizar:
  * Ha explorado 3+ carreras
  * Hace preguntas m√°s espec√≠ficas sobre 1-2 carreras
  * Expresa satisfacci√≥n o decisi√≥n ("creo que ya s√©", "me gusta esta opci√≥n")
  * Ha estado en esta fase por 5+ intercambios
- ENTONCES usa intent: "completion_check" y pregunta si quiere ver resultados finales
- Proporciona botones: ["Ver resultados finales", "Explorar m√°s carreras"]
- SOLO usa nextPhase: "complete" cuando el usuario confirme expl√≠citamente que quiere terminar
- Si usuario dice "Ver resultados finales" ‚Üí nextPhase: "complete" inmediatamente
- Si usuario dice "Explorar m√°s carreras" ‚Üí nextPhase: "career_exploration" y contin√∫a`;
    } else {
      systemPrompt += `

OBJETIVO PRINCIPAL:
- Descubrir qu√© carrera universitaria le conviene al usuario
- Evaluar tipos RIASEC de manera INTEGRAL pero EFICIENTE
- Hacer 12-15 preguntas estrat√©gicas para obtener un perfil completo
- Cubrir todos los aspectos importantes: intereses, habilidades, valores, ambiente laboral preferido
- Recomendar las 3 mejores carreras con base s√≥lida y reasoning detallado

ASPECTOS A EXPLORAR:
1. Intereses principales y actividades que disfruta
2. Habilidades naturales y talentos
3. Valores personales y motivaciones
4. Ambiente de trabajo preferido (solo vs. equipo, oficina vs. campo, etc.)
5. Nivel de responsabilidad y liderazgo deseado
6. Relaci√≥n con la tecnolog√≠a y herramientas
7. Importancia del aspecto econ√≥mico vs. satisfacci√≥n personal

CARRERAS DISPONIBLES EN MARACAIBO (USA IDs EXACTOS):
${context?.availableCareers?.map(c => `- ID: ${c.id} | ${c.name}: ${c.description?.substring(0, 200)} (RIASEC: ${c.riasecCode}, Scores: I:${c.riasecScores?.I || 0} R:${c.riasecScores?.R || 0})`).join('\n') || 'Cargando carreras...'}

PROCESO DE RECOMENDACI√ìN:
1. Revisa TODOS los intereses y habilidades mencionados por el usuario
2. Examina las descripciones de carreras para encontrar coincidencias tem√°ticas
3. Considera los scores RIASEC de las carreras vs el perfil del usuario
4. Selecciona las 3 carreras con mayor relevancia combinada (tema + RIASEC)
5. Explica claramente por qu√© cada carrera encaja con SUS intereses espec√≠ficos`;
    }

    systemPrompt += `

FASE ACTUAL: ${phase}
USUARIO: ${userName || 'Usuario'}

CONVERSACI√ìN HASTA AHORA:
${context?.userProfile?.previousResponses?.map(r => `P: ${r.question}\nR: ${r.response}`).join('\n\n') || 'Primera interacci√≥n'}`;

    return systemPrompt;
  }

  private formatMessagesForGemini(messages: ConversationMessage[]): string {
    return messages.map(msg => {
      const role = msg.role === 'assistant' ? 'ARIA' : 'USUARIO';
      return `${role}: ${msg.content}`;
    }).join('\n');
  }

  private getFallbackResponse(): ConversationResponse {
    console.log('üîÑ Using fallback response due to AI parsing error');
    return {
      message: "Disculpa, tuve un peque√±o problema t√©cnico. Pero sigamos adelante: cu√©ntame sobre tus intereses. ¬øQu√© tipo de actividades realmente disfrutas hacer en tu tiempo libre?",
      intent: "question",
      suggestedFollowUp: [
        "¬øPrefieres trabajar con tus manos o con ideas?",
        "¬øTe gusta resolver problemas complejos?",
        "¬øDisfrutas ayudar a otras personas?"
      ],
      nextPhase: "exploration",
      riasecAssessment: {
        scores: { R: 50, I: 50, A: 50, S: 50, E: 50, C: 50 },
        confidence: 20,
        reasoning: 'Respuesta de fallback - sin evaluaci√≥n a√∫n'
      }
    };
  }
}